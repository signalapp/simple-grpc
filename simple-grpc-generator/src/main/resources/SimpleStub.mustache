{{#packageName}}
package {{packageName}};
{{/packageName}}

import static {{packageName}}.{{serviceName}}Grpc.getServiceDescriptor;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;


{{#deprecated}}
@java.lang.Deprecated
{{/deprecated}}
@javax.annotation.Generated(
value = "by SimpleGrpc generator",
comments = "Source: {{protoName}}")
public final class {{className}} {
    private {{className}}() {}

    {{#javaDoc}}
    {{{javaDoc}}}
    {{/javaDoc}}
    public static abstract class {{serviceName}}ImplBase implements io.grpc.BindableService {

        {{#methods}}
            {{#javaDoc}}
        {{{javaDoc}}}
            {{/javaDoc}}
            {{#deprecated}}
        @java.lang.Deprecated
            {{/deprecated}}
        public {{#isManyOutput}}java.util.concurrent.Flow.Publisher<{{outputType}}>{{/isManyOutput}}{{^isManyOutput}}{{#isManyInput}}java.util.concurrent.CompletionStage<{{outputType}}>{{/isManyInput}}{{^isManyInput}}{{outputType}}{{/isManyInput}}{{/isManyOutput}} {{methodNameCamelCase}}(final {{#isManyInput}}java.util.concurrent.Flow.Publisher<{{inputType}}>{{/isManyInput}}{{^isManyInput}}{{inputType}}{{/isManyInput}} request) throws Exception {
            throw new io.grpc.StatusRuntimeException(io.grpc.Status.UNIMPLEMENTED);
        }

        {{/methods}}
        @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
            return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
                    {{#methods}}
                    .addMethod(
                            {{packageName}}.{{serviceName}}Grpc.get{{methodNamePascalCase}}Method(),
                            {{grpcCallsMethodName}}(
                                    new MethodHandlers<
                                            {{inputType}},
                                            {{outputType}}>(
                                            this, METHOD_ID_{{methodNameUpperUnderscore}})))
                    {{/methods}}
                    .build();
        }

        /**
         * Optionally maps an exception thrown or published by an RPC implementation method to a gRPC status. Unmapped
         * exceptions will be converted to a gRPC status via {@link io.grpc.Status#fromThrowable(Throwable)}.
         *
         * @param throwable the exception to map to a gRPC status
         *
         * @return a gRPC status or empty if the exception does not map to a known status
         */
        protected java.util.Optional<io.grpc.Status> mapExceptionToStatus(final Throwable throwable) {
            return java.util.Optional.empty();
        }
    }

    {{#methods}}
    public static final int METHOD_ID_{{methodNameUpperUnderscore}} = {{methodNumber}};
    {{/methods}}

    private static final class MethodHandlers<Req, Resp> implements
            io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
            io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
            io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
            io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
        private final {{serviceName}}ImplBase serviceImpl;
        private final int methodId;

        MethodHandlers({{serviceName}}ImplBase serviceImpl, int methodId) {
            this.serviceImpl = serviceImpl;
            this.methodId = methodId;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("unchecked")
        public void invoke(final Req request, final io.grpc.stub.StreamObserver<Resp> responseObserver) {
            switch (methodId) {
                {{#methods}}
                {{^isManyInput}}
                case METHOD_ID_{{methodNameUpperUnderscore}}:
                    org.signal.grpc.simple.ServerCalls.{{simpleCallsMethodName}}(({{inputType}}) request,
                            (io.grpc.stub.ServerCallStreamObserver<{{outputType}}>) responseObserver,
                            serviceImpl::{{methodNameCamelCase}},
                            serviceImpl::mapExceptionToStatus);
                    break;
                {{/isManyInput}}
                {{/methods}}
                default:
                    throw new java.lang.AssertionError();
            }
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("unchecked")
        public io.grpc.stub.StreamObserver<Req> invoke(final io.grpc.stub.StreamObserver<Resp> responseObserver) {
            switch (methodId) {
                {{#methods}}
                {{#isManyInput}}
                case METHOD_ID_{{methodNameUpperUnderscore}}:
                    return (io.grpc.stub.StreamObserver<Req>) org.signal.grpc.simple.ServerCalls.{{simpleCallsMethodName}}(
                            (io.grpc.stub.ServerCallStreamObserver<{{outputType}}>) responseObserver,
                            serviceImpl::{{methodNameCamelCase}},
                            serviceImpl::mapExceptionToStatus);
                {{/isManyInput}}
                {{/methods}}
                default:
                    throw new java.lang.AssertionError();
            }
        }
    }

}
